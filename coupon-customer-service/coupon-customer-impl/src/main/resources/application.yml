# 使用Nacos配置中心动态推送
#server:
#  port: 12582
#  error:
#    include-message: always

spring:
# application.name移入bootstrap.yml中
#  application:
#    name: coupon-customer-service
#  # 已改为从Nacos配置中心获取
#  datasource:
#    username: penistrong
#    password: chenliwei
#    url: jdbc:mysql://127.0.0.1:3306/coupon_db?autoReconnect=true&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC
#    type: com.zaxxer.hikari.HikariDataSource
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    # HikariDataSource配置
#    hikari:
#      pool-name: CouponHikari
#      connection-timeout: 5000
#      idle-timeout: 30000
#      maximum-pool-size: 10
#      minimum-idle: 5
#      max-lifetime: 60000
#      auto-commit: true
  jpa:
    show-sql: true
    hibernate:
      # 在生产环境全部为none，防止ddl结构被自动执行
      ddl-auto: none
    properties:
      hibernate.show_sql: true
      hibernate.format_sql: true
    open-in-view: false
  # Spring-Cloud配置
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        service: coupon-customer-service
        # Nacos客户端向服务端发送心跳的间隔，单位ms
        heart-beat-interval: 5000
        # Nacos服务端将未接收到心跳的客户端设置为 不健康 状态的时间间隔，单位ms
        heart-beat-timeout: 15000
        # 元数据部分，而可以添加自定义属性
        metadata:
          penistrong-custom-metadata: I-Penistrong
        # 客户端在启动是否读取本地配置项以获取服务列表，若为true会在本地维护一个配置项文件下次宕机重启动后会读取文件里的服务列表
        naming-load-cache-at-start: false
        # 集群名
        cluster-name: Cluster-Coupon
        # 命名空间ID, Nacos通过不同命名空间区分不同数据环境，进行数据隔离，服务消费时只能消费到其对应命名空间下的服务
        # 在Nacos-server中创建namespace后，将namespace的**ID**设置为该属性值
        namespace: coupon-center-dev
        # 服务集群，如果两个服务存在上下游调用关系，它们必须在同一group下才能发起请求
        group: main
        # 向Nacos注册中心注册服务，如果只消费其他服务而不提供服务，可以设置为false以减小开销
        register-enabled: true
        # 开启监听服务端信息变化
        watch:
          enabled: true
        watch-delay: 30000
    sentinel:
      transport:
        # Sentinel API端口 默认8719
        port: 8719
        dashboard: localhost:8080
      datasource:
        coupon-center-flow:
          nacos:
            server-addr: localhost:8848
            namespace: coupon-center-dev
            group-id: SENTINEL_GROUP
            data-id: ${spring.application.name}-flow-rules
            rule-type: flow
    stream:
      # 如果项目中只对接里一个中间件，就不需要定义binders
      # 当需要使用到多个消息中间件时，使用binders定义(直接在spring.rabbitmq节点下配置连接串)
      binders:
        middleware-rabbitmq:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: localhost
                port: 5672
                username: guest
                password: guest
      bindings:
        # SpringCloudStream 3.X之后约定了命名关系(当前使用版本是4.0.1):
        # Input信道(Consumer) : <functionName>-in-<index>
        # Output信道(Consumer) : <functionName>-out-<index>
        # <functionName> 对应 代码中创建的Consumer<T> <functionName>方法
        # 领券消息-生产者
        addCoupon-out-0:
          destination: request-coupon-topic
          content-type: application/json
          # 将该Stream信道绑定到binder中的消息队列中间件上
          binder: middleware-rabbitmq
        # 领券消息-消费者
        addCoupon-in-0:
          destination: request-coupon-topic
          content-type: application/json
          # 指定消费组，同组内一个消息只能被消费一次(消息分组单播，不指定group时就是广播消息)
          group: add-coupon-group
          binder: middleware-rabbitmq
          # 设定消费者本地重试，注意业务逻辑的幂等性，若不满足一定不能重试
          consumer:
            # 若设定max-attempts=1,表示只消费1次,出错也不重试
            # 默认设定为3, 即第一次消费失败后最多再重试2次S
            max-attempts: 5
            # 两次重试之间的初始间隔
            back-off-initial-interval: 2000
            # 两次重试之间的最大间隔
            back-off-max-interval: 10000
            # 每次间隔时间乘以的系数(类似于TCP的超时重试机制)
            back-off-multiplier: 2
            # 当某些异常被抛出后，配置可以重试或者不重试
            retryable-exceptions:
              # 对于非法参数异常，不进行重试，直接抛出到上层处理
              java.lang.IllegalArgumentException: false
        # 延迟领券消息-生产者
        addCouponDelay-out-0:
          # 延迟消息单独使用一个交换机
          destination: request-coupon-delayed-topic
          content-type: application/json
          binder: middleware-rabbitmq
        # 延迟领券消息-消费者
        addCouponDelay-in-0:
          destination: request-coupon-delayed-topic
          content-type: application/json
          group: add-coupon-group
          binder: middleware-rabbitmq
          consumer:
            # 设定最大尝试次数为1，出错也不重试
            max-attempts: 1
        # 删除券消息-生产者
        deleteCoupon-out-0:
          destination: delete-coupon-topic
          content-type: text/plain
          binder: middleware-rabbitmq
        # 删除券信息-消费者
        deleteCoupon-in-0:
          destination: delete-coupon-topic
          content-type: text/plain
          group: delete-coupon-group
          binder: middleware-rabbitmq
      function:
        # 指明functionName 进行组装和绑定(有多组消费者的情况下使用)
        definition: addCoupon;addCouponDelay;deleteCoupon
      rabbit:
        bindings:
          # 声明以下两个信道使用的是具备延迟功能的交换机(利用rabbitmq-delayed-exchange-plugin实现)
          # 延迟交换机的类型是x-delayed-message,且带有DM功能标签
          addCouponDelay-out-0:
            producer:
              delayed-exchange: true
          addCouponDelay-in-0:
            consumer:
              delayed-exchange: true
          # 删除券信息的消费者信道开启死信队列功能，当删除一个不存在的优惠券消费者就会抛出异常，将该消息压入死信队列中
          deleteCoupon-in-0:
            consumer:
              auto-bind-dlq: true
  zipkin:
    sender:
      type: rabbit
    rabbitmq:
      addresses: 127.0.0.1:5672
      queue: zipkin

logging:
  # With Micrometer Tracing and Boot 3.0 need to set Logging Pattern
  # Instead of TraceEnvironmentPostProcessor
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
  level:
    com.broadview.coupon: debug
    # 配置OpenFeign日志信息打印
    org.penistrong.coupon.customer.feign.TemplateService: debug
    org.penistrong.coupon.customer.feign.CalculationService: debug

feign:
  client:
    config:
      # 全局默认超时判定配置
      default:
        connectTimeout: 1000
        readTimeout: 5000
      # 针对特定服务配置
      coupon-template-service:
        connectTimeout: 1000
        readTimeout: 2000

management:
  endpoints:
    web:
      exposure:
        include: '*'
  # 链路追踪配置
  tracing:
    sampling:
      probability: 1.0  # 采样率100%
  # 集成第三方链路追踪系统Zipkin
  zipkin:
    tracing:
      endpoint: http://127.0.0.1:9411/api/v2/spans
